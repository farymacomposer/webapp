/* tslint:disable */
/* eslint-disable */
/**
 * Faryma.Composer.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 * Запрос входа в систему
 * @export
 * @interface FarymaComposerApiAuthLoginLoginRequest
 */
export interface FarymaComposerApiAuthLoginLoginRequest {
  /**
   * Имя пользователя
   * @type {string}
   * @memberof FarymaComposerApiAuthLoginLoginRequest
   */
  userName: string;
  /**
   * Пароль
   * @type {string}
   * @memberof FarymaComposerApiAuthLoginLoginRequest
   */
  password: string;
}
/**
 * Ответ на запрос входа в систему
 * @export
 * @interface FarymaComposerApiAuthLoginLoginResponse
 */
export interface FarymaComposerApiAuthLoginLoginResponse {
  /**
   * JWT-токен
   * @type {string}
   * @memberof FarymaComposerApiAuthLoginLoginResponse
   */
  token: string;
}
/**
 * Запрос регистрации пользователя
 * @export
 * @interface FarymaComposerApiAuthRegisterRegisterRequest
 */
export interface FarymaComposerApiAuthRegisterRegisterRequest {
  /**
   * Имя пользователя
   * @type {string}
   * @memberof FarymaComposerApiAuthRegisterRegisterRequest
   */
  userName: string;
  /**
   * Пароль
   * @type {string}
   * @memberof FarymaComposerApiAuthRegisterRegisterRequest
   */
  password: string;
}
/**
 * Настройки приложения
 * @export
 * @interface FarymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto
 */
export interface FarymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto {
  /**
   * Номинальная стоимость заказа (для бесплатных разборов)
   * @type {number}
   * @memberof FarymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto
   */
  reviewOrderNominalAmount: number;
}
/**
 * Стрим композитора
 * @export
 * @interface FarymaComposerApiFeaturesComposerStreamFeatureComposerStreamDto
 */
export interface FarymaComposerApiFeaturesComposerStreamFeatureComposerStreamDto {
  /**
   * Id стрима
   * @type {number}
   * @memberof FarymaComposerApiFeaturesComposerStreamFeatureComposerStreamDto
   */
  id: number;
  /**
   * Дата проведения стрима
   * @type {string}
   * @memberof FarymaComposerApiFeaturesComposerStreamFeatureComposerStreamDto
   */
  eventDate: string;
  /**
   * Статус стрима
   * @type {FarymaComposerInfrastructureEnumsComposerStreamStatus}
   * @memberof FarymaComposerApiFeaturesComposerStreamFeatureComposerStreamDto
   */
  status: FarymaComposerInfrastructureEnumsComposerStreamStatus;
  /**
   * Тип стрима
   * @type {FarymaComposerInfrastructureEnumsComposerStreamType}
   * @memberof FarymaComposerApiFeaturesComposerStreamFeatureComposerStreamDto
   */
  type: FarymaComposerInfrastructureEnumsComposerStreamType;
}

/**
 * Запрос создания стрима
 * @export
 * @interface FarymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest
 */
export interface FarymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest {
  /**
   * Дата проведения стрима
   * @type {string}
   * @memberof FarymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest
   */
  eventDate: string;
  /**
   * Тип стрима
   * @type {FarymaComposerInfrastructureEnumsComposerStreamType}
   * @memberof FarymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest
   */
  type: FarymaComposerInfrastructureEnumsComposerStreamType;
}

/**
 * Ответ на запрос создания стрима
 * @export
 * @interface FarymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamResponse
 */
export interface FarymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamResponse {
  /**
   * Стрим композитора
   * @type {FarymaComposerApiFeaturesComposerStreamFeatureComposerStreamDto}
   * @memberof FarymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamResponse
   */
  composerStream: FarymaComposerApiFeaturesComposerStreamFeatureComposerStreamDto;
}
/**
 * Ответ на запрос поиска стримов композитора
 * @export
 * @interface FarymaComposerApiFeaturesComposerStreamFeatureFindFindComposerStreamResponse
 */
export interface FarymaComposerApiFeaturesComposerStreamFeatureFindFindComposerStreamResponse {
  /**
   * Список стримов
   * @type {Array<FarymaComposerApiFeaturesComposerStreamFeatureComposerStreamDto>}
   * @memberof FarymaComposerApiFeaturesComposerStreamFeatureFindFindComposerStreamResponse
   */
  items: Array<FarymaComposerApiFeaturesComposerStreamFeatureComposerStreamDto>;
}
/**
 * Запрос добавления ссылки на трек
 * @export
 * @interface FarymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest
 */
export interface FarymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest {
  /**
   * Id заказа разбора трека
   * @type {number}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest
   */
  reviewOrderId: number;
  /**
   * Ссылка на трек
   * @type {string}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest
   */
  trackUrl: string;
}
/**
 * Ответ на запрос добавления ссылки на трек
 * @export
 * @interface FarymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlResponse
 */
export interface FarymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlResponse {
  /**
   * Id заказа на разбор трека
   * @type {number}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlResponse
   */
  reviewOrderId: number;
  /**
   * Ссылка на трек
   * @type {string}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlResponse
   */
  trackUrl: string;
}
/**
 * Запрос отмены заказа на разбор
 * @export
 * @interface FarymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest
 */
export interface FarymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest {
  /**
   * Id заказа разбора трека
   * @type {number}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest
   */
  reviewOrderId: number;
}
/**
 * Ответ на запрос отмены заказа на разбор
 * @export
 * @interface FarymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderResponse
 */
export interface FarymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderResponse {
  /**
   * Id отмененного заказа разбора трека
   * @type {number}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderResponse
   */
  reviewOrderId: number;
}
/**
 * Запрос выполнения заказа
 * @export
 * @interface FarymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest
 */
export interface FarymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest {
  /**
   * Id заказа разбора трека
   * @type {number}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest
   */
  reviewOrderId: number;
  /**
   * Оценка трека (0-26)
   * @type {number}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest
   */
  rating: number;
  /**
   * Комментарий к разбору
   * @type {string}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest
   */
  comment: string;
}
/**
 * Ответ на запрос выполнения заказа
 * @export
 * @interface FarymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderResponse
 */
export interface FarymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderResponse {
  /**
   * Id выполненного заказа разбора трека
   * @type {number}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderResponse
   */
  reviewOrderId: number;
  /**
   * Id созданного разбора
   * @type {number}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderResponse
   */
  reviewId: number;
}
/**
 * Запрос создания заказа на разбор
 * @export
 * @interface FarymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest
 */
export interface FarymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest {
  /**
   * Псевдоним пользователя
   * @type {string}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest
   */
  nickname: string;
  /**
   * Тип заказа разбора трека
   * @type {FarymaComposerInfrastructureEnumsReviewOrderType}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest
   */
  orderType: FarymaComposerInfrastructureEnumsReviewOrderType;
  /**
   * Ссылка на трек
   * @type {string}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest
   */
  trackUrl?: string | null;
  /**
   * Сумма платежа
   * @type {number}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest
   */
  paymentAmount?: number | null;
  /**
   * Комментарий пользователя
   * @type {string}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest
   */
  userComment?: string | null;
}

/**
 * Ответ на запрос создания заказа на разбор
 * @export
 * @interface FarymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderResponse
 */
export interface FarymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderResponse {
  /**
   * Id заказа на разбора трека
   * @type {number}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderResponse
   */
  reviewOrderId: number;
}
/**
 * Запрос заморозки заказа на разбор
 * @export
 * @interface FarymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest
 */
export interface FarymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest {
  /**
   * Id заказа разбора трека
   * @type {number}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest
   */
  reviewOrderId: number;
}
/**
 * Ответ на запрос заморозки заказа на разбор
 * @export
 * @interface FarymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderResponse
 */
export interface FarymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderResponse {
  /**
   * Id замороженного заказа разбора трека
   * @type {number}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderResponse
   */
  reviewOrderId: number;
}
/**
 * Запрос взятия заказа в работу
 * @export
 * @interface FarymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest
 */
export interface FarymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest {
  /**
   * Id заказа разбора трека
   * @type {number}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest
   */
  reviewOrderId: number;
}
/**
 * Ответ на запрос взятия заказа в работу
 * @export
 * @interface FarymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressResponse
 */
export interface FarymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressResponse {
  /**
   * Id заказа разбора трека
   * @type {number}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressResponse
   */
  reviewOrderId: number;
}
/**
 * Запрос разморозки заказа на разбор
 * @export
 * @interface FarymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest
 */
export interface FarymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest {
  /**
   * Id заказа разбора трека
   * @type {number}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest
   */
  reviewOrderId: number;
}
/**
 * Ответ на запрос разморозки заказа на разбор
 * @export
 * @interface FarymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderResponse
 */
export interface FarymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderResponse {
  /**
   * Id размороженного заказа разбора трека
   * @type {number}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderResponse
   */
  reviewOrderId: number;
}
/**
 * Запрос поднятия заказа в очереди
 * @export
 * @interface FarymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest
 */
export interface FarymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest {
  /**
   * Псевдоним пользователя
   * @type {string}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest
   */
  nickname: string;
  /**
   * Id заказа на разбора трека
   * @type {number}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest
   */
  reviewOrderId: number;
  /**
   * Сумма платежа
   * @type {number}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest
   */
  paymentAmount: number;
}
/**
 * Ответ на запрос поднятия заказа в очереди
 * @export
 * @interface FarymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderResponse
 */
export interface FarymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderResponse {
  /**
   * Id платежа
   * @type {number}
   * @memberof FarymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderResponse
   */
  paymentTransactionId: number;
}
/**
 * Статус стрима
 * @export
 * @enum {string}
 */

export const FarymaComposerInfrastructureEnumsComposerStreamStatus = {
  Unspecified: "Unspecified",
  Planned: "Planned",
  Live: "Live",
  Completed: "Completed",
  Canceled: "Canceled",
} as const;

export type FarymaComposerInfrastructureEnumsComposerStreamStatus =
  (typeof FarymaComposerInfrastructureEnumsComposerStreamStatus)[keyof typeof FarymaComposerInfrastructureEnumsComposerStreamStatus];

/**
 * Тип стрима
 * @export
 * @enum {string}
 */

export const FarymaComposerInfrastructureEnumsComposerStreamType = {
  Unspecified: "Unspecified",
  Donation: "Donation",
  Debt: "Debt",
  Charity: "Charity",
} as const;

export type FarymaComposerInfrastructureEnumsComposerStreamType =
  (typeof FarymaComposerInfrastructureEnumsComposerStreamType)[keyof typeof FarymaComposerInfrastructureEnumsComposerStreamType];

/**
 * Тип заказа разбора трека
 * @export
 * @enum {string}
 */

export const FarymaComposerInfrastructureEnumsReviewOrderType = {
  Unspecified: "Unspecified",
  OutOfQueue: "OutOfQueue",
  Donation: "Donation",
  Free: "Free",
  Charity: "Charity",
} as const;

export type FarymaComposerInfrastructureEnumsReviewOrderType =
  (typeof FarymaComposerInfrastructureEnumsReviewOrderType)[keyof typeof FarymaComposerInfrastructureEnumsReviewOrderType];

/**
 * AppSettingsApi - axios parameter creator
 * @export
 */
export const AppSettingsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Возвращает текущие настройки
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppSettingsGetAppSettingsGet: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/AppSettings/GetAppSettings`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Обновляет настройки
     * @param {FarymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto} [farymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppSettingsUpdateAppSettingsPost: async (
      farymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto?: FarymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/AppSettings/UpdateAppSettings`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        farymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AppSettingsApi - functional programming interface
 * @export
 */
export const AppSettingsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    AppSettingsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Возвращает текущие настройки
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppSettingsGetAppSettingsGet(
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FarymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppSettingsGetAppSettingsGet(
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AppSettingsApi.apiAppSettingsGetAppSettingsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Обновляет настройки
     * @param {FarymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto} [farymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppSettingsUpdateAppSettingsPost(
      farymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto?: FarymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppSettingsUpdateAppSettingsPost(
          farymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "AppSettingsApi.apiAppSettingsUpdateAppSettingsPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AppSettingsApi - factory interface
 * @export
 */
export const AppSettingsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AppSettingsApiFp(configuration);
  return {
    /**
     *
     * @summary Возвращает текущие настройки
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppSettingsGetAppSettingsGet(
      options?: RawAxiosRequestConfig
    ): AxiosPromise<FarymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto> {
      return localVarFp
        .apiAppSettingsGetAppSettingsGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Обновляет настройки
     * @param {FarymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto} [farymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppSettingsUpdateAppSettingsPost(
      farymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto?: FarymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .apiAppSettingsUpdateAppSettingsPost(
          farymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AppSettingsApi - object-oriented interface
 * @export
 * @class AppSettingsApi
 * @extends {BaseAPI}
 */
export class AppSettingsApi extends BaseAPI {
  /**
   *
   * @summary Возвращает текущие настройки
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppSettingsApi
   */
  public apiAppSettingsGetAppSettingsGet(options?: RawAxiosRequestConfig) {
    return AppSettingsApiFp(this.configuration)
      .apiAppSettingsGetAppSettingsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Обновляет настройки
   * @param {FarymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto} [farymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppSettingsApi
   */
  public apiAppSettingsUpdateAppSettingsPost(
    farymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto?: FarymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto,
    options?: RawAxiosRequestConfig
  ) {
    return AppSettingsApiFp(this.configuration)
      .apiAppSettingsUpdateAppSettingsPost(
        farymaComposerApiFeaturesAppSettingsFeatureAppSettingsDto,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Выполняет аутентификацию пользователя и возвращает JWT токен
     * @param {FarymaComposerApiAuthLoginLoginRequest} [farymaComposerApiAuthLoginLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthLoginPost: async (
      farymaComposerApiAuthLoginLoginRequest?: FarymaComposerApiAuthLoginLoginRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Auth/Login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        farymaComposerApiAuthLoginLoginRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Регистрирует нового пользователя в системе
     * @param {FarymaComposerApiAuthRegisterRegisterRequest} [farymaComposerApiAuthRegisterRegisterRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthRegisterPost: async (
      farymaComposerApiAuthRegisterRegisterRequest?: FarymaComposerApiAuthRegisterRegisterRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Auth/Register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        farymaComposerApiAuthRegisterRegisterRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Выполняет аутентификацию пользователя и возвращает JWT токен
     * @param {FarymaComposerApiAuthLoginLoginRequest} [farymaComposerApiAuthLoginLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAuthLoginPost(
      farymaComposerApiAuthLoginLoginRequest?: FarymaComposerApiAuthLoginLoginRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FarymaComposerApiAuthLoginLoginResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAuthLoginPost(
          farymaComposerApiAuthLoginLoginRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthApi.apiAuthLoginPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Регистрирует нового пользователя в системе
     * @param {FarymaComposerApiAuthRegisterRegisterRequest} [farymaComposerApiAuthRegisterRegisterRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAuthRegisterPost(
      farymaComposerApiAuthRegisterRegisterRequest?: FarymaComposerApiAuthRegisterRegisterRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAuthRegisterPost(
          farymaComposerApiAuthRegisterRegisterRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthApi.apiAuthRegisterPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AuthApiFp(configuration);
  return {
    /**
     *
     * @summary Выполняет аутентификацию пользователя и возвращает JWT токен
     * @param {FarymaComposerApiAuthLoginLoginRequest} [farymaComposerApiAuthLoginLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthLoginPost(
      farymaComposerApiAuthLoginLoginRequest?: FarymaComposerApiAuthLoginLoginRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<FarymaComposerApiAuthLoginLoginResponse> {
      return localVarFp
        .apiAuthLoginPost(farymaComposerApiAuthLoginLoginRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Регистрирует нового пользователя в системе
     * @param {FarymaComposerApiAuthRegisterRegisterRequest} [farymaComposerApiAuthRegisterRegisterRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthRegisterPost(
      farymaComposerApiAuthRegisterRegisterRequest?: FarymaComposerApiAuthRegisterRegisterRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .apiAuthRegisterPost(
          farymaComposerApiAuthRegisterRegisterRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @summary Выполняет аутентификацию пользователя и возвращает JWT токен
   * @param {FarymaComposerApiAuthLoginLoginRequest} [farymaComposerApiAuthLoginLoginRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public apiAuthLoginPost(
    farymaComposerApiAuthLoginLoginRequest?: FarymaComposerApiAuthLoginLoginRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .apiAuthLoginPost(farymaComposerApiAuthLoginLoginRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Регистрирует нового пользователя в системе
   * @param {FarymaComposerApiAuthRegisterRegisterRequest} [farymaComposerApiAuthRegisterRegisterRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public apiAuthRegisterPost(
    farymaComposerApiAuthRegisterRegisterRequest?: FarymaComposerApiAuthRegisterRegisterRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .apiAuthRegisterPost(
        farymaComposerApiAuthRegisterRegisterRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ComposerStreamApi - axios parameter creator
 * @export
 */
export const ComposerStreamApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Создает стрим
     * @param {FarymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest} [farymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiComposerStreamCreateComposerStreamPost: async (
      farymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest?: FarymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ComposerStream/CreateComposerStream`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        farymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Возвращает список стримов
     * @param {string} dateFrom Начальная дата периода поиска
     * @param {string} dateTo Конечная дата периода поиска
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiComposerStreamFindComposerStreamGet: async (
      dateFrom: string,
      dateTo: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'dateFrom' is not null or undefined
      assertParamExists(
        "apiComposerStreamFindComposerStreamGet",
        "dateFrom",
        dateFrom
      );
      // verify required parameter 'dateTo' is not null or undefined
      assertParamExists(
        "apiComposerStreamFindComposerStreamGet",
        "dateTo",
        dateTo
      );
      const localVarPath = `/api/ComposerStream/FindComposerStream`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (dateFrom !== undefined) {
        localVarQueryParameter["DateFrom"] =
          (dateFrom as any) instanceof Date
            ? (dateFrom as any).toISOString().substring(0, 10)
            : dateFrom;
      }

      if (dateTo !== undefined) {
        localVarQueryParameter["DateTo"] =
          (dateTo as any) instanceof Date
            ? (dateTo as any).toISOString().substring(0, 10)
            : dateTo;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ComposerStreamApi - functional programming interface
 * @export
 */
export const ComposerStreamApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    ComposerStreamApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Создает стрим
     * @param {FarymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest} [farymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiComposerStreamCreateComposerStreamPost(
      farymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest?: FarymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FarymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiComposerStreamCreateComposerStreamPost(
          farymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "ComposerStreamApi.apiComposerStreamCreateComposerStreamPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Возвращает список стримов
     * @param {string} dateFrom Начальная дата периода поиска
     * @param {string} dateTo Конечная дата периода поиска
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiComposerStreamFindComposerStreamGet(
      dateFrom: string,
      dateTo: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FarymaComposerApiFeaturesComposerStreamFeatureFindFindComposerStreamResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiComposerStreamFindComposerStreamGet(
          dateFrom,
          dateTo,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "ComposerStreamApi.apiComposerStreamFindComposerStreamGet"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ComposerStreamApi - factory interface
 * @export
 */
export const ComposerStreamApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ComposerStreamApiFp(configuration);
  return {
    /**
     *
     * @summary Создает стрим
     * @param {FarymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest} [farymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiComposerStreamCreateComposerStreamPost(
      farymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest?: FarymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<FarymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamResponse> {
      return localVarFp
        .apiComposerStreamCreateComposerStreamPost(
          farymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Возвращает список стримов
     * @param {string} dateFrom Начальная дата периода поиска
     * @param {string} dateTo Конечная дата периода поиска
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiComposerStreamFindComposerStreamGet(
      dateFrom: string,
      dateTo: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<FarymaComposerApiFeaturesComposerStreamFeatureFindFindComposerStreamResponse> {
      return localVarFp
        .apiComposerStreamFindComposerStreamGet(dateFrom, dateTo, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ComposerStreamApi - object-oriented interface
 * @export
 * @class ComposerStreamApi
 * @extends {BaseAPI}
 */
export class ComposerStreamApi extends BaseAPI {
  /**
   *
   * @summary Создает стрим
   * @param {FarymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest} [farymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComposerStreamApi
   */
  public apiComposerStreamCreateComposerStreamPost(
    farymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest?: FarymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest,
    options?: RawAxiosRequestConfig
  ) {
    return ComposerStreamApiFp(this.configuration)
      .apiComposerStreamCreateComposerStreamPost(
        farymaComposerApiFeaturesComposerStreamFeatureCreateCreateComposerStreamRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Возвращает список стримов
   * @param {string} dateFrom Начальная дата периода поиска
   * @param {string} dateTo Конечная дата периода поиска
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComposerStreamApi
   */
  public apiComposerStreamFindComposerStreamGet(
    dateFrom: string,
    dateTo: string,
    options?: RawAxiosRequestConfig
  ) {
    return ComposerStreamApiFp(this.configuration)
      .apiComposerStreamFindComposerStreamGet(dateFrom, dateTo, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * OrderQueueApi - axios parameter creator
 * @export
 */
export const OrderQueueApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiOrderQueueGetOrderQueuePost: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/OrderQueue/GetOrderQueue`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OrderQueueApi - functional programming interface
 * @export
 */
export const OrderQueueApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    OrderQueueApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiOrderQueueGetOrderQueuePost(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiOrderQueueGetOrderQueuePost(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OrderQueueApi.apiOrderQueueGetOrderQueuePost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * OrderQueueApi - factory interface
 * @export
 */
export const OrderQueueApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = OrderQueueApiFp(configuration);
  return {
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiOrderQueueGetOrderQueuePost(
      options?: RawAxiosRequestConfig
    ): AxiosPromise<object> {
      return localVarFp
        .apiOrderQueueGetOrderQueuePost(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * OrderQueueApi - object-oriented interface
 * @export
 * @class OrderQueueApi
 * @extends {BaseAPI}
 */
export class OrderQueueApi extends BaseAPI {
  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrderQueueApi
   */
  public apiOrderQueueGetOrderQueuePost(options?: RawAxiosRequestConfig) {
    return OrderQueueApiFp(this.configuration)
      .apiOrderQueueGetOrderQueuePost(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ReviewOrderApi - axios parameter creator
 * @export
 */
export const ReviewOrderApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Добавляет или изменяет ссылку на трек
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest} [farymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiReviewOrderAddTrackUrlPost: async (
      farymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest?: FarymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ReviewOrder/AddTrackUrl`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        farymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Отменяет заказ
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiReviewOrderCancelReviewOrderPost: async (
      farymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ReviewOrder/CancelReviewOrder`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        farymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Выполнение заказа
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiReviewOrderCompleteReviewOrderPost: async (
      farymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ReviewOrder/CompleteReviewOrder`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        farymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Создает заказ
     * @param {string} [idempotencyKey] Ключ идемпотентности
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest] Запрос создания заказа
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiReviewOrderCreateReviewOrderPost: async (
      idempotencyKey?: string,
      farymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ReviewOrder/CreateReviewOrder`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      if (idempotencyKey != null) {
        localVarHeaderParameter["Idempotency-Key"] = String(idempotencyKey);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        farymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Замораживает заказ
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiReviewOrderFreezeReviewOrderPost: async (
      farymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ReviewOrder/FreezeReviewOrder`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        farymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Взятие заказа в работу
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest} [farymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiReviewOrderTakeOrderInProgressPost: async (
      farymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest?: FarymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ReviewOrder/TakeOrderInProgress`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        farymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Размораживает заказ
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiReviewOrderUnfreezeReviewOrderPost: async (
      farymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ReviewOrder/UnfreezeReviewOrder`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        farymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Поднимает заказ в очереди
     * @param {string} [idempotencyKey] Ключ идемпотентности
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest] Запрос поднятия заказа в очереди
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiReviewOrderUpReviewOrderPost: async (
      idempotencyKey?: string,
      farymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ReviewOrder/UpReviewOrder`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      if (idempotencyKey != null) {
        localVarHeaderParameter["Idempotency-Key"] = String(idempotencyKey);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        farymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ReviewOrderApi - functional programming interface
 * @export
 */
export const ReviewOrderApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    ReviewOrderApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Добавляет или изменяет ссылку на трек
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest} [farymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiReviewOrderAddTrackUrlPost(
      farymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest?: FarymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FarymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiReviewOrderAddTrackUrlPost(
          farymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ReviewOrderApi.apiReviewOrderAddTrackUrlPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Отменяет заказ
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiReviewOrderCancelReviewOrderPost(
      farymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FarymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiReviewOrderCancelReviewOrderPost(
          farymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "ReviewOrderApi.apiReviewOrderCancelReviewOrderPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Выполнение заказа
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiReviewOrderCompleteReviewOrderPost(
      farymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FarymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiReviewOrderCompleteReviewOrderPost(
          farymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "ReviewOrderApi.apiReviewOrderCompleteReviewOrderPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Создает заказ
     * @param {string} [idempotencyKey] Ключ идемпотентности
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest] Запрос создания заказа
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiReviewOrderCreateReviewOrderPost(
      idempotencyKey?: string,
      farymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FarymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiReviewOrderCreateReviewOrderPost(
          idempotencyKey,
          farymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "ReviewOrderApi.apiReviewOrderCreateReviewOrderPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Замораживает заказ
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiReviewOrderFreezeReviewOrderPost(
      farymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FarymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiReviewOrderFreezeReviewOrderPost(
          farymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "ReviewOrderApi.apiReviewOrderFreezeReviewOrderPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Взятие заказа в работу
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest} [farymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiReviewOrderTakeOrderInProgressPost(
      farymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest?: FarymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FarymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiReviewOrderTakeOrderInProgressPost(
          farymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "ReviewOrderApi.apiReviewOrderTakeOrderInProgressPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Размораживает заказ
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiReviewOrderUnfreezeReviewOrderPost(
      farymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FarymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiReviewOrderUnfreezeReviewOrderPost(
          farymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "ReviewOrderApi.apiReviewOrderUnfreezeReviewOrderPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Поднимает заказ в очереди
     * @param {string} [idempotencyKey] Ключ идемпотентности
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest] Запрос поднятия заказа в очереди
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiReviewOrderUpReviewOrderPost(
      idempotencyKey?: string,
      farymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FarymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiReviewOrderUpReviewOrderPost(
          idempotencyKey,
          farymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ReviewOrderApi.apiReviewOrderUpReviewOrderPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ReviewOrderApi - factory interface
 * @export
 */
export const ReviewOrderApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ReviewOrderApiFp(configuration);
  return {
    /**
     *
     * @summary Добавляет или изменяет ссылку на трек
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest} [farymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiReviewOrderAddTrackUrlPost(
      farymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest?: FarymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<FarymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlResponse> {
      return localVarFp
        .apiReviewOrderAddTrackUrlPost(
          farymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Отменяет заказ
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiReviewOrderCancelReviewOrderPost(
      farymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<FarymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderResponse> {
      return localVarFp
        .apiReviewOrderCancelReviewOrderPost(
          farymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Выполнение заказа
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiReviewOrderCompleteReviewOrderPost(
      farymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<FarymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderResponse> {
      return localVarFp
        .apiReviewOrderCompleteReviewOrderPost(
          farymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Создает заказ
     * @param {string} [idempotencyKey] Ключ идемпотентности
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest] Запрос создания заказа
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiReviewOrderCreateReviewOrderPost(
      idempotencyKey?: string,
      farymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<FarymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderResponse> {
      return localVarFp
        .apiReviewOrderCreateReviewOrderPost(
          idempotencyKey,
          farymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Замораживает заказ
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiReviewOrderFreezeReviewOrderPost(
      farymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<FarymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderResponse> {
      return localVarFp
        .apiReviewOrderFreezeReviewOrderPost(
          farymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Взятие заказа в работу
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest} [farymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiReviewOrderTakeOrderInProgressPost(
      farymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest?: FarymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<FarymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressResponse> {
      return localVarFp
        .apiReviewOrderTakeOrderInProgressPost(
          farymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Размораживает заказ
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiReviewOrderUnfreezeReviewOrderPost(
      farymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<FarymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderResponse> {
      return localVarFp
        .apiReviewOrderUnfreezeReviewOrderPost(
          farymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Поднимает заказ в очереди
     * @param {string} [idempotencyKey] Ключ идемпотентности
     * @param {FarymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest] Запрос поднятия заказа в очереди
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiReviewOrderUpReviewOrderPost(
      idempotencyKey?: string,
      farymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<FarymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderResponse> {
      return localVarFp
        .apiReviewOrderUpReviewOrderPost(
          idempotencyKey,
          farymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ReviewOrderApi - object-oriented interface
 * @export
 * @class ReviewOrderApi
 * @extends {BaseAPI}
 */
export class ReviewOrderApi extends BaseAPI {
  /**
   *
   * @summary Добавляет или изменяет ссылку на трек
   * @param {FarymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest} [farymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReviewOrderApi
   */
  public apiReviewOrderAddTrackUrlPost(
    farymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest?: FarymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest,
    options?: RawAxiosRequestConfig
  ) {
    return ReviewOrderApiFp(this.configuration)
      .apiReviewOrderAddTrackUrlPost(
        farymaComposerApiFeaturesReviewOrderFeatureAddTrackUrlAddTrackUrlRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Отменяет заказ
   * @param {FarymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReviewOrderApi
   */
  public apiReviewOrderCancelReviewOrderPost(
    farymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest,
    options?: RawAxiosRequestConfig
  ) {
    return ReviewOrderApiFp(this.configuration)
      .apiReviewOrderCancelReviewOrderPost(
        farymaComposerApiFeaturesReviewOrderFeatureCancelCancelReviewOrderRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Выполнение заказа
   * @param {FarymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReviewOrderApi
   */
  public apiReviewOrderCompleteReviewOrderPost(
    farymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest,
    options?: RawAxiosRequestConfig
  ) {
    return ReviewOrderApiFp(this.configuration)
      .apiReviewOrderCompleteReviewOrderPost(
        farymaComposerApiFeaturesReviewOrderFeatureCompleteCompleteReviewOrderRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Создает заказ
   * @param {string} [idempotencyKey] Ключ идемпотентности
   * @param {FarymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest] Запрос создания заказа
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReviewOrderApi
   */
  public apiReviewOrderCreateReviewOrderPost(
    idempotencyKey?: string,
    farymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest,
    options?: RawAxiosRequestConfig
  ) {
    return ReviewOrderApiFp(this.configuration)
      .apiReviewOrderCreateReviewOrderPost(
        idempotencyKey,
        farymaComposerApiFeaturesReviewOrderFeatureCreateCreateReviewOrderRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Замораживает заказ
   * @param {FarymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReviewOrderApi
   */
  public apiReviewOrderFreezeReviewOrderPost(
    farymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest,
    options?: RawAxiosRequestConfig
  ) {
    return ReviewOrderApiFp(this.configuration)
      .apiReviewOrderFreezeReviewOrderPost(
        farymaComposerApiFeaturesReviewOrderFeatureFreezeFreezeReviewOrderRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Взятие заказа в работу
   * @param {FarymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest} [farymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReviewOrderApi
   */
  public apiReviewOrderTakeOrderInProgressPost(
    farymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest?: FarymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest,
    options?: RawAxiosRequestConfig
  ) {
    return ReviewOrderApiFp(this.configuration)
      .apiReviewOrderTakeOrderInProgressPost(
        farymaComposerApiFeaturesReviewOrderFeatureTakeInProgressTakeOrderInProgressRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Размораживает заказ
   * @param {FarymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReviewOrderApi
   */
  public apiReviewOrderUnfreezeReviewOrderPost(
    farymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest,
    options?: RawAxiosRequestConfig
  ) {
    return ReviewOrderApiFp(this.configuration)
      .apiReviewOrderUnfreezeReviewOrderPost(
        farymaComposerApiFeaturesReviewOrderFeatureUnfreezeUnfreezeReviewOrderRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Поднимает заказ в очереди
   * @param {string} [idempotencyKey] Ключ идемпотентности
   * @param {FarymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest} [farymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest] Запрос поднятия заказа в очереди
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReviewOrderApi
   */
  public apiReviewOrderUpReviewOrderPost(
    idempotencyKey?: string,
    farymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest?: FarymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest,
    options?: RawAxiosRequestConfig
  ) {
    return ReviewOrderApiFp(this.configuration)
      .apiReviewOrderUpReviewOrderPost(
        idempotencyKey,
        farymaComposerApiFeaturesReviewOrderFeatureUpUpReviewOrderRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
