"use client";

import { useEffect, useState } from "react";
import { signalRService } from "@/services/signalRService";
import {
  NewOrderAddedEvent,
  OrderPositionChangedEvent,
  OrderRemovedEvent,
} from "@/types/signalR";
import { Api } from "@/services/client";
import {
  FarymaComposerApiFeaturesOrderQueueFeatureGetOrderQueueGetOrderQueueResponse,
  FarymaComposerApiFeaturesCommonDtoReviewOrderDto,
  FarymaComposerApiFeaturesOrderQueueFeatureDtoOrderPositionDto,
} from "../../generated-api";

export function useOrdersSignalR() {
  // üëâ —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏–º –∏–º–µ–Ω–Ω–æ ReviewOrderDto[]
  const [orders, setOrders] = useState<
    FarymaComposerApiFeaturesCommonDtoReviewOrderDto[]
  >([]);
  const [connected, setConnected] = useState(false);
  const [syncVersion, setSyncVersion] = useState(0);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ HTTP
  async function reloadQueue() {
    try {
      const response = await Api.orderQueue.apiOrderQueueGetOrderQueueGet();
      const data =
        response.data as FarymaComposerApiFeaturesOrderQueueFeatureGetOrderQueueGetOrderQueueResponse;

      // –ó–∞–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ order –∏–∑ OrderPositionDto
      const merged = [
        ...data.activeOrders.map((p) => p.order!).filter(Boolean),
        ...(data.inProgressOrder ? [data.inProgressOrder.order!] : []),
        ...data.completedOrders.map((p) => p.order!).filter(Boolean),
        ...data.scheduledOrders.map((p) => p.order!).filter(Boolean),
        ...data.frozenOrders.map((p) => p.order!).filter(Boolean),
      ];

      setOrders(merged);
      setSyncVersion(data.syncVersion ?? 0);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–µ—Ä–µ–¥–∏:", err);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  function checkSyncVersion(newSyncVersion: number): boolean {
    if (newSyncVersion === syncVersion + 1) {
      setSyncVersion(newSyncVersion);
      return true;
    }
    if (newSyncVersion > syncVersion + 1) {
      console.warn(
        `‚ö†Ô∏è –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–±—ã—Ç–∏–µ: –æ–∂–∏–¥–∞–ª—Å—è ${
          syncVersion + 1
        }, –Ω–æ –ø—Ä–∏—à—ë–ª ${newSyncVersion}. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ—á–µ—Ä–µ–¥—å...`
      );
      reloadQueue();
      return false;
    }
    return false;
  }

  useEffect(() => {
    let mounted = true;

    const init = async () => {
      try {
        await signalRService.start();
        if (!mounted) return;
        setConnected(true);

        // –ù–æ–≤—ã–π –∑–∞–∫–∞–∑
        signalRService.on<NewOrderAddedEvent>(
          "newOrderAddedEvent",
          ({ syncVersion: sv, order }) => {
            if (!checkSyncVersion(sv)) return;

            setOrders((prev) => {
              const exists = prev.find((o) => o.id === order.id);
              if (exists) {
                return prev.map((o) => (o.id === order.id ? order : o));
              }
              return [...prev, order];
            });
          }
        );

        // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        signalRService.on<OrderRemovedEvent>(
          "orderRemovedEvent",
          ({ syncVersion: sv, order }) => {
            if (!checkSyncVersion(sv)) return;
            setOrders((prev) => prev.filter((o) => o.id !== order.id));
          }
        );

        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–Ω–∞–º –≤–∞–∂–µ–Ω —Ç–æ–ª—å–∫–æ order)
        signalRService.on<OrderPositionChangedEvent>(
          "orderPositionChangedEvent",
          ({ syncVersion: sv, order }) => {
            if (!checkSyncVersion(sv)) return;

            setOrders((prev) =>
              prev.map((o) => (o.id === order.id ? order : o))
            );
          }
        );

        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤ (–æ–ø—è—Ç—å –∂–µ –±–µ—Ä—ë–º order)
        signalRService.on<OrderPositionsChangedEvent>(
          "orderPositionsChangedEvent",
          ({ syncVersion: sv, orderPositions }) => {
            if (!checkSyncVersion(sv)) return;

            setOrders((prev) =>
              prev.map((o) => {
                const update = orderPositions.find(
                  (
                    u: FarymaComposerApiFeaturesOrderQueueFeatureDtoOrderPositionDto
                  ) => u.order?.id === o.id
                );
                return update?.order ?? o;
              })
            );
          }
        );

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
        reloadQueue();
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SignalR:", err);
      }
    };

    init();

    return () => {
      mounted = false;
      signalRService.stop();
    };
  }, []);

  return { orders, connected, syncVersion, reloadQueue };
}
