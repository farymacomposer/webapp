// <auto-generated />
using System;
using System.Collections.Generic;
using Faryma.Composer.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Faryma.Composer.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250825064641_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("app")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.AppSettingsEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ReviewOrderNominalAmount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AppSettings", "app");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ReviewOrderNominalAmount = 750
                        });
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.ComposerStream", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("EventDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("WentLiveAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventDate")
                        .IsUnique();

                    b.ToTable("ComposerStreams", "app");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RatingValue")
                        .HasColumnType("integer");

                    b.Property<long?>("ReviewOrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TrackId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReviewOrderId")
                        .IsUnique();

                    b.HasIndex("TrackId");

                    b.ToTable("Reviews", "app");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.ReviewOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CategoryType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreationStreamId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("InProgressAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsFrozen")
                        .HasColumnType("boolean");

                    b.Property<string>("MainNickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MainNormalizedNickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("NominalAmount")
                        .HasColumnType("numeric");

                    b.Property<long?>("ProcessingStreamId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("TrackId")
                        .HasColumnType("bigint");

                    b.Property<string>("TrackUrl")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UserComment")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreationStreamId");

                    b.HasIndex("ProcessingStreamId");

                    b.HasIndex("TrackId");

                    b.ToTable("ReviewOrders", "app");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.Track", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AddedByUserNicknameId")
                        .HasColumnType("uuid");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CoverUrl")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("ExtendedGenres")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserNicknameId");

                    b.HasIndex("CountryId");

                    b.ToTable("Tracks", "app");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.TrackArtist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.ToTable("TrackArtists", "app");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.TrackCountry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TrackCountries", "app");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.TrackGenre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TrackGenres", "app");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "электронное"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "фолк"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "рок"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "разное"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "джаз"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "метал"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "рэп"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "поп"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "оркестровый"
                        },
                        new
                        {
                            Id = 10L,
                            Name = "фанк"
                        },
                        new
                        {
                            Id = 11L,
                            Name = "мюзикл/опера"
                        },
                        new
                        {
                            Id = 12L,
                            Name = "инди"
                        },
                        new
                        {
                            Id = 13L,
                            Name = "поп-рок"
                        },
                        new
                        {
                            Id = 14L,
                            Name = "шансон"
                        },
                        new
                        {
                            Id = 15L,
                            Name = "специфическое"
                        },
                        new
                        {
                            Id = 16L,
                            Name = "баллада"
                        },
                        new
                        {
                            Id = 17L,
                            Name = "фортепиано"
                        },
                        new
                        {
                            Id = 18L,
                            Name = "инструментал"
                        });
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ReviewOrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReviewOrderId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Transactions", "app");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "app");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserNicknameId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserNicknameId")
                        .IsUnique();

                    b.ToTable("UserAccounts", "app");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.UserNickname", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedNickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedNickname")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserNicknames", "app");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.UserTrackRating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RatingValue")
                        .HasColumnType("integer");

                    b.Property<long>("TrackId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTrackRatings", "app");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "app");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c3ddcde-24e7-458c-8d9c-1e5f424d3ddd"),
                            ConcurrencyStamp = "9C3DDCDE-24E7-458C-8D9C-1E5F424D3DDD",
                            Name = "Composer",
                            NormalizedName = "COMPOSER"
                        },
                        new
                        {
                            Id = new Guid("ac0b9e85-a06f-4655-822b-9c125d8d7bb4"),
                            ConcurrencyStamp = "AC0B9E85-A06F-4655-822B-9C125D8D7BB4",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = new Guid("910c6755-4833-4c62-8df7-4241a159a8d2"),
                            ConcurrencyStamp = "910C6755-4833-4C62-8DF7-4241A159A8D2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "app");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "app");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "app");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "app");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "app");
                });

            modelBuilder.Entity("ReviewOrderUserNickname", b =>
                {
                    b.Property<long>("ReviewOrdersId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserNicknamesId")
                        .HasColumnType("uuid");

                    b.HasKey("ReviewOrdersId", "UserNicknamesId");

                    b.HasIndex("UserNicknamesId");

                    b.ToTable("ReviewOrderUserNickname", "app");
                });

            modelBuilder.Entity("TrackArtistUser", b =>
                {
                    b.Property<long>("AssociatedArtistsId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("AssociatedArtistsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TrackArtistUser", "app");
                });

            modelBuilder.Entity("TrackTrackArtist", b =>
                {
                    b.Property<long>("ArtistsId")
                        .HasColumnType("bigint");

                    b.Property<long>("TracksId")
                        .HasColumnType("bigint");

                    b.HasKey("ArtistsId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("TrackTrackArtist", "app");
                });

            modelBuilder.Entity("TrackTrackGenre", b =>
                {
                    b.Property<long>("GenresId")
                        .HasColumnType("bigint");

                    b.Property<long>("TracksId")
                        .HasColumnType("bigint");

                    b.HasKey("GenresId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("TrackTrackGenre", "app");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.Review", b =>
                {
                    b.HasOne("Faryma.Composer.Infrastructure.Entities.ReviewOrder", "ReviewOrder")
                        .WithOne("Review")
                        .HasForeignKey("Faryma.Composer.Infrastructure.Entities.Review", "ReviewOrderId");

                    b.HasOne("Faryma.Composer.Infrastructure.Entities.Track", "Track")
                        .WithMany("Reviews")
                        .HasForeignKey("TrackId");

                    b.Navigation("ReviewOrder");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.ReviewOrder", b =>
                {
                    b.HasOne("Faryma.Composer.Infrastructure.Entities.ComposerStream", "CreationStream")
                        .WithMany("CreatedReviewOrders")
                        .HasForeignKey("CreationStreamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Faryma.Composer.Infrastructure.Entities.ComposerStream", "ProcessingStream")
                        .WithMany("ProcessedReviewOrders")
                        .HasForeignKey("ProcessingStreamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Faryma.Composer.Infrastructure.Entities.Track", "Track")
                        .WithMany("ReviewOrders")
                        .HasForeignKey("TrackId");

                    b.Navigation("CreationStream");

                    b.Navigation("ProcessingStream");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.Track", b =>
                {
                    b.HasOne("Faryma.Composer.Infrastructure.Entities.UserNickname", "AddedBy")
                        .WithMany("UploadedTracks")
                        .HasForeignKey("AddedByUserNicknameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Faryma.Composer.Infrastructure.Entities.TrackCountry", "Country")
                        .WithMany("Tracks")
                        .HasForeignKey("CountryId");

                    b.OwnsMany("Faryma.Composer.Infrastructure.Models.TrackTag", "Tags", b1 =>
                        {
                            b1.Property<long>("TrackId")
                                .HasColumnType("bigint");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Meta")
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("TrackId", "__synthesizedOrdinal");

                            b1.ToTable("Tracks", "app");

                            b1.ToJson("Tags");

                            b1.WithOwner()
                                .HasForeignKey("TrackId");
                        });

                    b.Navigation("AddedBy");

                    b.Navigation("Country");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.Transaction", b =>
                {
                    b.HasOne("Faryma.Composer.Infrastructure.Entities.ReviewOrder", "ReviewOrder")
                        .WithMany("Payments")
                        .HasForeignKey("ReviewOrderId");

                    b.HasOne("Faryma.Composer.Infrastructure.Entities.UserAccount", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ReviewOrder");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.UserAccount", b =>
                {
                    b.HasOne("Faryma.Composer.Infrastructure.Entities.UserNickname", "UserNickname")
                        .WithOne("Account")
                        .HasForeignKey("Faryma.Composer.Infrastructure.Entities.UserAccount", "UserNicknameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserNickname");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.UserNickname", b =>
                {
                    b.HasOne("Faryma.Composer.Infrastructure.Entities.User", "User")
                        .WithMany("UserNicknames")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.UserTrackRating", b =>
                {
                    b.HasOne("Faryma.Composer.Infrastructure.Entities.Track", "Track")
                        .WithMany("UserRatings")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Faryma.Composer.Infrastructure.Entities.User", "User")
                        .WithMany("TrackRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Faryma.Composer.Infrastructure.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Faryma.Composer.Infrastructure.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Faryma.Composer.Infrastructure.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Faryma.Composer.Infrastructure.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReviewOrderUserNickname", b =>
                {
                    b.HasOne("Faryma.Composer.Infrastructure.Entities.ReviewOrder", null)
                        .WithMany()
                        .HasForeignKey("ReviewOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Faryma.Composer.Infrastructure.Entities.UserNickname", null)
                        .WithMany()
                        .HasForeignKey("UserNicknamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackArtistUser", b =>
                {
                    b.HasOne("Faryma.Composer.Infrastructure.Entities.TrackArtist", null)
                        .WithMany()
                        .HasForeignKey("AssociatedArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Faryma.Composer.Infrastructure.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackTrackArtist", b =>
                {
                    b.HasOne("Faryma.Composer.Infrastructure.Entities.TrackArtist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Faryma.Composer.Infrastructure.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackTrackGenre", b =>
                {
                    b.HasOne("Faryma.Composer.Infrastructure.Entities.TrackGenre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Faryma.Composer.Infrastructure.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.ComposerStream", b =>
                {
                    b.Navigation("CreatedReviewOrders");

                    b.Navigation("ProcessedReviewOrders");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.ReviewOrder", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.Track", b =>
                {
                    b.Navigation("ReviewOrders");

                    b.Navigation("Reviews");

                    b.Navigation("UserRatings");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.TrackCountry", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.User", b =>
                {
                    b.Navigation("TrackRatings");

                    b.Navigation("UserNicknames");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.UserAccount", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Faryma.Composer.Infrastructure.Entities.UserNickname", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();

                    b.Navigation("UploadedTracks");
                });
#pragma warning restore 612, 618
        }
    }
}
